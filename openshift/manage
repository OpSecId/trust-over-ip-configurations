#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

function isInstalled () {
  rtnVal=$(type "$1" >/dev/null 2>&1)
  rtnCd=$?
  if [ ${rtnCd} -ne 0 ]; then
    return 1
  else
    return 0
  fi
}

function isCurlInstalled () {
  CURL_EXE=curl
  if ! isInstalled ${CURL_EXE}; then
    echoError "The ${CURL_EXE} executable is required and was not found on your path."
    echoError "If your shell of choice doesn't come with curl preinstalled, try installing it using either [Homebrew](https://brew.sh/) (MAC) or [Chocolatey](https://chocolatey.org/) (Windows)."
    exit 1
  fi
}

function isJQInstalled () {
  JQ_EXE=jq
  if ! isInstalled ${JQ_EXE}; then
    echoError "The ${JQ_EXE} executable is required and was not found on your path."
    echoError "Installation instructions can be found here: https://stedolan.github.io/jq/download"
    echoError "Alternatively, a package manager such as Chocolatey (Windows) or Brew (Mac) can be used to install this dependecy."
    exit 1
  fi
}

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of project environment.

  Usage:
    $0 [options] [commands]

  Commands:
  ========
    configureProof <baseUrl> <payLoadPath> [namespace] [secretName] [secretKey]
      - Post a proof configuration to a vc-authn-oidc controller.
      - To update, PUT, use the '-u' (update) option; see examples below.

        Examples;
          $0 -p default -e dev configureProof https://toip-vc-authn-controller-dev.apps.silver.devops.gov.bc.ca ../proof-configurations/accredited-lawyer/dev/accredited-lawyer.json
          $0 -p default -e dev -u configureProof https://toip-vc-authn-controller-dev.apps.silver.devops.gov.bc.ca ../proof-configurations/accredited-lawyer/dev/accredited-lawyer.json

    accepttaa <baseUrl> [secretName] [secretKey] [namespace]
      - Retrieve the current TAA from the ledger, and submit a TAA accept transaction.

        Examples;
          $0 -p a2a -e dev accepttaa https://agent-admin-url-dev.apps.silver.devops.gov.bc.ca
          $0 -p health-gateway -e dev accepttaa https://health-gateway-agent-admin-dev.apps.silver.devops.gov.bc.ca agent-health-gateway

    registerSovrin <baseUrl> <stagingnet|buildernet> [secretName] [secretKey] [namespace]
      - Register the agent on the target ledger as an ENDORSER.

        Examples;
          $0 -p default -e dev registerSovrin https://agent-admin-url-dev.apps.silver.devops.gov.bc.ca stagingnet
          $0 -p health-gateway -e dev registerSovrin https://health-gateway-agent-admin-dev.apps.silver.devops.gov.bc.ca StagingNet agent-health-gateway

    [didRole=<didRole>] getLedgerNymCmd <baseUrl> <stagingnet|buildernet> [secretName] [secretKey] [namespace]
      - Get the indy-cli 'ledger nym' command needed to register the agent's DID on the ledger.
      - Default role is ENDORSER.

        Examples;
          $0 -p default -e dev getLedgerNymCmd https://agent-admin-url-dev.apps.silver.devops.gov.bc.ca
          $0 -p health-gateway -e dev getLedgerNymCmd https://health-gateway-agent-admin-dev.apps.silver.devops.gov.bc.ca StagingNet agent-health-gateway
          didRole=TRUSTEE $0 -p health-gateway -e dev getLedgerNymCmd https://health-gateway-agent-admin-dev.apps.silver.devops.gov.bc.ca StagingNet agent-health-gateway

    addAuthClient <clientName> <clientRedirectUri> [clientCorsOrigin]
      - Adds a new client to the vc-authn database.

        Examples;
          $0 -p default -e dev addauthclient mynewclient https:///my.newclient.example
          $0 -p default -e dev addauthclient mynewclient https:///my.newclient.example https:///my.newclient.weburl

    updateAuthClient <clientName> <clientRedirectUri> [clientCorsOrigin]
      - Updates the client with the given name in the the vc-authn database.

        Examples;
          $0 -p default -e dev updateAuthClient myclient https:///my.client.example
          $0 -p default -e dev updateAuthClient myclient https:///my.client.example https:///my.client.weburl

    getAuthClient [clientName]
      - Gets the configuration for the client with the given name, or all clients, in the the vc-authn database.

        Examples;
          $0 -p default -e dev getAuthClient
          $0 -p default -e dev getAuthClient myclient

    clean
      - Remove the application components from a given environment.
        Specify the environment using the -e option.

    delete
      - Delete allapplication components from a given environment.
        Specify the environment using the -e option.

    scaleUp
      - Scale up one or more pods.
        Example;
          $0 -p medlab -e prod scaleUp agent-a2a api-a2a issuer-web-a2a

    scaleDown
      - Scale down one or more pods.
        Example;
          $0 -p medlab -e prod scaleDown agent-a2a api-a2a issuer-web-a2a

    recycle
      - Recycle one or more pods.
        Example;
          $0 -p medlab -e prod recycle agent-a2a api-a2a issuer-web-a2a
EOF
}

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
deleteResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    printAndAskToContinue "If you contiune all of the resources for '${_appName}' will be deleted.  All data will be lost."
    oc -n $(getProjectName) delete all,secret,pvc,configmap,NetworkPolicy -l app-group=${_appName}
  )
}

cleanResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    echoWarning "Cleaning out resources for '${_appName}'.  Secrets and PVCs will be retained."
    oc -n $(getProjectName) delete all,configmap,NetworkPolicy -l app-group=${_appName}
  )
}

configureProof() {
  baseUrl=${1}
  payLoadPath=${2}
  namespace=${3}
  secretName=${4}
  secretKey=${5}
  if [ -z "${baseUrl}" ] || [ -z "${payLoadPath}" ]|| [ -z "${namespace}" ]|| [ -z "${secretName}" ]|| [ -z "${secretKey}" ]; then
    echoError "\nconfigureProof; You MUST specify the following parameters:\n- baseUrl\n- payLoadPath\n- namespace\n- secretName\n- secretKey"
    exit 1
  fi

  apiKey=$(getSecret "${secretName}" "${secretKey}" "${namespace}")
  if [ -z "${apiKey}" ]; then
    echoError "\nconfigureProof; Unable to process request:\n - Unable to locate the API Key for ${baseUrl}.\n   Please ensure you are logged into OpenShift and have access to the following resources.\n   - Namespace: ${namespace}\n   - Secret Name: ${secretName}\n   - Key: ${secretKey}"
    exit 1
  fi

  if createOperation; then
    httpCommand="POST"
  else
    httpCommand="PUT"
  fi

  if [ ${payLoadPath} == "all" ]; then
    searchPath="../proof-configurations"
    searchFilter="*.json"
    payLoadPaths=$(find ${searchPath} -type f -name "${searchFilter}")
  else
    payLoadPaths=${payLoadPath}
  fi

  for payLoadPath in ${payLoadPaths}; do
    echo -e "\n${httpCommand}ing '${payLoadPath}' to ${baseUrl} ...\n"
    ${CURL_EXE} \
      -X ${httpCommand} \
      -H X-Api-Key:${apiKey} \
      -H accept:application/json \
      -H Content-Type:application/json-patch+json \
      --data @${payLoadPath} \
      ${baseUrl}/api/vc-configs
  done
}

accepttaa() {
  baseUrl=${1}
  secretName=${2}
  secretKey=${3}
  namespace=${4}

  if [ -z "${baseUrl}" ] || [ -z "${namespace}" ]|| [ -z "${secretName}" ]|| [ -z "${secretKey}" ]; then
    echoError "\naccepttaa; You MUST specify the following parameters:\n- baseUrl\n- secretName\n- secretKey\n- namespace"
    exit 1
  fi

  apiKey=$(getSecret "${secretName}" "${secretKey}" "${namespace}")
  if [ -z "${apiKey}" ]; then
    echoError "\accepttaa; Unable to process request:\n - Unable to locate the API Key for ${baseUrl}.\n   Please ensure you are logged into OpenShift and have access to the following resources.\n   - Namespace: ${namespace}\n   - Secret Name: ${secretName}\n   - Secret Key: ${secretKey}"
    exit 1
  fi

  # fetch current TAA
  echo -e "\nFetching TAA ...\n"
  TAA=$(${CURL_EXE} \
      -s \
      -X GET \
      -H X-Api-Key:${apiKey} \
      ${baseUrl}/ledger/taa )

  TAA_VERSION=$(${JQ_EXE} -nr "${TAA} | .result.taa_record.version")
  TAA_METHODS_KEYS=$(${JQ_EXE} -nr "${TAA} | .result.aml_record.aml | keys_unsorted | .[]")
  TAA_METHODS_KEYS=$(echo "${TAA_METHODS_KEYS}" | sed 's/$/~/')
  TAA_METHODS_KEYS=${TAA_METHODS_KEYS//$'\n'/}
  TAA_METHODS_VALUES=$(${JQ_EXE} -nr "${TAA} | .result.aml_record.aml | .[]")
  TAA_METHODS_VALUES=$(echo "${TAA_METHODS_VALUES}" | sed 's/$/~/')
  TAA_METHODS_VALUES=${TAA_METHODS_VALUES//$'\n'/}

  IFS='~'
  read -r -a TAA_METHODS_KEYS <<< "$TAA_METHODS_KEYS"
  read -r -a TAA_METHODS_VALUES <<< "$TAA_METHODS_VALUES"
  unset IFS

  # Prompt user for TAA signing method
  echoWarning "Please select from the following Transaction Author Agreement signing options:"
  unset SELECTED_MECHANISM
  PS3="Option: "
  select opt in "${TAA_METHODS_VALUES[@]}"; do
    SELECTED_MECHANISM=${TAA_METHODS_KEYS[$REPLY-1]}
    if (($REPLY-1 >= 0)) && [ ! -z "${SELECTED_MECHANISM}" ]; then
      break
    else
      echoWarning "\n'${REPLY}' is not one of the available options.  Please select from one of the available options, or press Ctrl+C to quit."
    fi
  done

  printAndAskToContinue "Please review your selection:\n\n  - ${SELECTED_MECHANISM}: ${TAA_METHODS_VALUES[$REPLY-1]}\n\nIf this is correct, press any key to proceed. Otherwise press Ctrl+C to start over."

  echo -e "Signing TAA using method ${SELECTED_MECHANISM} ...\n"
  # The less processing done on ''.result.taa_record.text' the better.
  echo "{\"mechanism\":\"${SELECTED_MECHANISM}\", \"version\": \"${TAA_VERSION}\", \"text\":$(${JQ_EXE} -n "${TAA} | .result.taa_record.text")}" > taa_payload.json

  httpCode=$(${CURL_EXE} \
      -s \
      -o /dev/null \
      -w %{http_code} \
      -X POST \
      -H X-Api-Key:${apiKey} \
      -H "Content-Type: application/json charset=utf-8" \
      -d @taa_payload.json \
      ${baseUrl}/ledger/taa/accept )
  rm -f ./taa_payload.json

  if [[ "${httpCode}" == "200" ]]; then
    echo "Successully accepted the TAA on behalf of the agent."
  else
    echoError "There was an error accepting the TAA on behalf of the agent.  Please ensure all of the parameters are correct and try again."
  fi
}

registerSovrin() {
  local OPTIND
  local _auto_register=1
  while getopts c FLAG; do
    case $FLAG in
      c ) unset _auto_register ;;
    esac
  done
  shift $((OPTIND-1))

  baseUrl=${1}
  ledger=$(toLower ${2})
  secretName=${3}
  secretKey=${4}
  namespace=${5}
  didRole=${6:-ENDORSER}

  if [ -z "${baseUrl}" ] || [ -z "${namespace}" ]|| [ -z "${secretName}" ]|| [ -z "${secretKey}" ]; then
    echoError "\nregisterSovrin; You MUST specify the following parameters:\n- baseUrl\n- secretName\n- secretKey\n- namespace"
    exit 1
  fi

  apiKey=$(getSecret "${secretName}" "${secretKey}" "${namespace}")
  if [ -z "${apiKey}" ]; then
    echoError "\nregisterSovrin; Unable to process request:\n - Unable to locate the API Key for ${baseUrl}.\n   Please ensure you are logged into OpenShift and have access to the following resources.\n   - Namespace: ${namespace}\n   - Secret Name: ${secretName}\n   - Secret Key: ${secretKey}"
    exit 1
  fi

  echo -e "\nRetrieving the agent's DID and verKey from ${baseUrl} ..."
  AGENT_PUBLIC_INFO=$(${CURL_EXE} \
                    -s \
                    -X GET \
                    -H  "accept: application/json" \
                    -H  "X-Api-Key: ${apiKey}"\
                    "${baseUrl}/wallet/did/public")

  did=$(echo $AGENT_PUBLIC_INFO | ${JQ_EXE} --raw-output '.result.did')
  verkey=$(echo $AGENT_PUBLIC_INFO | ${JQ_EXE} --raw-output '.result.verkey')

  if [ ! -z "${_auto_register}" ]; then
    echoWarning "Registering DID: '${did}' and verKey: '${verkey}' on ledger: '${ledger}' ..."
    httpCode=$(${CURL_EXE} \
        -s \
        -o /dev/null \
        -w %{http_code} \
        -X POST \
        -H "Content-Type: application/json charset=utf-8" \
        -d "{\"network\":\"${ledger}\",\"did\":\"${did}\",\"verkey\":\"${verkey}\",\"paymentaddr\":\"\"}" \
        https://selfserve.sovrin.org/nym )

    if [[ "${httpCode}" == "200" ]]; then
      echo "Successully registered the agent's DID on ${ledger}."
    else
      echoError "There was an error registering the agent's DID on ${ledger}.  Please ensure all of the parameters are correct and try again."
    fi
  else
    echo -e "\nledger nym did=${did} verkey=${verkey} role=${didRole}"
  fi
}

addAuthClient() {
  _clientName=${1}
  _clientRedirectUri=${2}
  _clientCorsOrigin=${3}
  _podName=${4:-vc-authn-database}

  re="[[:space:]]+"
  if [ -z "${_clientName}" ] || [ -z "${_clientName}" ] || [ -z "${_clientRedirectUri}" ]; then
    echo -e \\n"addAuthClient; One or more paramaters are invalid. Required parameters are clientName, clientRedirectUri."\\n
    exit 1
  fi

  if [[ $_clientName =~ $re ]]; then
    echo -e \\n"addAuthClient; The client name cannot include spaces."\\n
    exit 1
  fi

  if [ -z "${_clientCorsOrigin}" ]; then
    echoWarning "*** You have not specified a CORS origin for this client ***"
    printAndAskToContinue "If this is correct, press any key to proceed. Otherwise press Ctrl+C to start over ..."
  fi

  # Add new client
  echo -e "Creating client '${_clientName}'..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"Clients\" (\"ClientId\", \"ClientName\", \"Created\", \"Enabled\",\"ProtocolType\",\"RequireClientSecret\",\"Description\",\"ClientUri\",\"LogoUri\",\"RequireConsent\",\"AllowRememberConsent\",\"AlwaysIncludeUserClaimsInIdToken\",\"RequirePkce\",\"AllowPlainTextPkce\",\"AllowAccessTokensViaBrowser\",\"FrontChannelLogoutUri\",\"FrontChannelLogoutSessionRequired\",\"BackChannelLogoutUri\",\"BackChannelLogoutSessionRequired\",\"AllowOfflineAccess\",\"IdentityTokenLifetime\",\"AccessTokenLifetime\",\"AuthorizationCodeLifetime\",\"ConsentLifetime\",\"AbsoluteRefreshTokenLifetime\",\"SlidingRefreshTokenLifetime\",\"RefreshTokenUsage\",\"UpdateAccessTokenClaimsOnRefresh\",\"RefreshTokenExpiration\",\"AccessTokenType\",\"EnableLocalLogin\",\"IncludeJwtId\",\"AlwaysSendClientClaims\",\"ClientClaimsPrefix\",\"PairWiseSubjectSalt\",\"Updated\",\"LastAccessed\",\"UserSsoLifetime\",\"UserCodeType\",\"DeviceCodeLifetime\",\"NonEditable\",\"AllowedIdentityTokenSigningAlgorithms\",\"RequireRequestObject\") VALUES ('\''${_clientName}'\'', '\''${_clientName}'\'',CURRENT_DATE,true,'\''oidc'\'',false,NULL,NULL,NULL,false,true,false,true,false,false,NULL,true,NULL,true,false,300,3600,300,NULL,2592000,1296000,1,false,1,0,true,true,false,'\''client_'\'',NULL,NULL,NULL,NULL,NULL,300,false,NULL,false);'"

  # Retrieve new client id
  _clientId=$(runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -tAc 'select \"Id\" from \"Clients\" where \"ClientName\" = '\''${_clientName}'\'';'")

  echo -e "Client ${_clientName} has Id=${_clientId}"

  # Add client scopes
  echo -e "Creating client scopes ..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientScopes\" (\"Scope\", \"ClientId\") select \"Scope\", ${_clientId} as \"ClientId\" from \"ClientScopes\" where \"ClientId\" = 1;'"

  # Add client grant types
  echo -e "Creating grant types ..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientGrantTypes\" (\"GrantType\", \"ClientId\") select \"GrantType\", ${_clientId} as \"ClientId\" from \"ClientGrantTypes\" where \"ClientId\" = 1;'"

  # Add client redirect URI
  echo -e "Adding ${_clientRedirectUri} as redirect URI ..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientRedirectUris\" (\"RedirectUri\", \"ClientId\") values ('\''${_clientRedirectUri}'\'', ${_clientId});'"

  if [ ! -z "${_clientCorsOrigin}" ]; then
    echo -e "Adding ${_clientCorsOrigin} as CORS origin ..."
    # Add client CORS origin
    runInContainer \
      ${_podName} \
      "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientCorsOrigins\" (\"Origin\", \"ClientId\") values ('\''${_clientCorsOrigin}'\'', ${_clientId});'"
  else
    echoWarning "No CORS origin specified, skipping ..."
  fi

  echo -e "New client created successfully!"
}

updateAuthClient() {
  _clientName=${1}
  _clientRedirectUri=${2}
  _clientCorsOrigin=${3}
  _podName=${4:-vc-authn-database}

  re="[[:space:]]+"
  if [ -z "${_clientName}" ] || [ -z "${_clientName}" ] || [ -z "${_clientRedirectUri}" ]; then
    echo -e \\n"addAuthClient; One or more paramaters are invalid. Required parameters are clientName, clientRedirectUri."\\n
    exit 1
  fi

  if [[ $_clientName =~ $re ]]; then
    echo -e \\n"addAuthClient; The client name cannot include spaces."\\n
    exit 1
  fi

  if [ -z "${_clientCorsOrigin}" ]; then
    echoWarning "*** No CORS origin was specified for the client, any existing value will not be updated ***"
  fi

  # Retrieve new client id
  _clientId=$(runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -tAc 'select \"Id\" from \"Clients\" where \"ClientName\" = '\''${_clientName}'\'';'")

  echo -e "Client ${_clientName} has Id=${_clientId}"

  # Update client redirect URI
  echo -e "Updating client redirect URI ..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'update \"ClientRedirectUris\" set \"RedirectUri\" = '\''${_clientRedirectUri}'\'' where \"ClientId\" = ${_clientId};'"

  if [ ! -z "${_clientCorsOrigin}" ]; then
    # Update client CORS origin
    echo -e "Update client CORS origin ..."
    runInContainer \
      ${_podName} \
      "psql -d \${POSTGRESQL_DATABASE} -ac 'update \"ClientCorsOrigins\" set \"Origin\" = '\''${_clientCorsOrigin}'\'' where \"ClientId\" = ${_clientId};'"
  fi

  echo -e "Client updated sucessfully!"
}

getAuthClient() {
  _clientName=${1}
  _podName=${2:-vc-authn-database}

  selectStmt="select c.\"ClientName\", r.\"RedirectUri\", o.\"Origin\" from \"Clients\" c join \"ClientRedirectUris\" r on c.\"Id\"=r.\"ClientId\" left join \"ClientCorsOrigins\" o on c.\"Id\"=o.\"ClientId\""

  if [ ! -z ${_clientName} ]; then
    selectStmt=$(echo ${selectStmt} "where c.\"ClientName\" = '\''${_clientName}'\''")
  else
    selectStmt=$(echo $selectStmt)
  fi

  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac '${selectStmt}'"
}

putFixRevocationEntryState() {
  urlEnvSuffix=${1}
  revRegId=${2}
  applyLedgerUpdate=${3}
  xApiKey=${4}

  apiUrl="https://lsbc-agent-admin${urlEnvSuffix}.apps.silver.devops.gov.bc.ca/revocation/registry/${revRegId}/fix-revocation-entry-state?apply_ledger_update=${applyLedgerUpdate}"
  response=$(${CURL_EXE} \
    -s -w "HTTPSTATUSCODE:%{http_code}" \
    -X 'PUT' \
    "${apiUrl}" \
    -H 'accept: application/json' \
    -H "X-API-KEY: ${xApiKey}")

  body=$(echo "${response}" | sed -E 's~HTTPSTATUSCODE\:[0-9]{3}$~~')
  statusCode=$(echo "${response}" | tr -d '\n' | sed -E 's~.*HTTPSTATUSCODE:([0-9]{3})$~\1~')
  if [[ "${statusCode}" == "200" ]]; then
    echo "$(echo "${body}" | ${JQ_EXE} '.')"
    return 0
  else
    return 1
  fi
}

syncRevEntryState() {
  xApiKey=${X_API_KEY}
  revRegId=${REV_REG_ID}
  applyLedgerUpdate="false"
  if [[ "${DEPLOYMENT_ENV_NAME}" != "prod" ]]; then
    urlEnvSuffix="-${DEPLOYMENT_ENV_NAME}"
  fi

  response=$(putFixRevocationEntryState "${urlEnvSuffix}" "${revRegId}" "${applyLedgerUpdate}" "${xApiKey}")
  rtnCd=${?}
  if (( ${rtnCd} == 0 )); then
    accum_calculated="$(echo "${response}" | ${JQ_EXE} --raw-output '.accum_calculated | .[]?')"

    if [[ ! -z ${accum_calculated} ]]; then
      applyLedgerUpdate="true"
    fi

    if [[ ${applyLedgerUpdate} == "true" ]]; then
      echo
      read -r -p "The accumulators are out of sync.  Would you like to synchronize them? [y/n] " response
      # https://stackoverflow.com/a/3232082
      if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        response=$(putFixRevocationEntryState "${urlEnvSuffix}" "${revRegId}" "${applyLedgerUpdate}" "${xApiKey}")
        rtnCd=${?}
        if (( ${rtnCd} == 0 )); then
          echo -e "\nAccumulators have been synchronized."
        else
          echo -e "\nThe call to fix-revocation-entry-state failed.  Please try again."
        fi
      else
        echo -e "\nAccumulators have not been synchronized."
      fi
    else
      echo -e "\nThe accumulators are already in sync."
    fi
  else
    echo -e "\nThe call to fix-revocation-entry-state failed.  Please try again."
  fi
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  clean)
    appName=${1:-${PROFILE}}
    cleanResources ${appName}
    ;;

  delete)
    appName=${1:-${PROFILE}}
    deleteResources ${appName}
    ;;

  configureproof)
    isCurlInstalled
    isJQInstalled

    baseUrl=${1}
    payLoadPath=${2}
    namespace=${3:-$(getProjectName)}
    secretName=${4:-vc-authn-controller}
    secretKey=${5:-controller-api-key}
    configureProof ${baseUrl} ${payLoadPath} ${namespace} ${secretName} ${secretKey}
    ;;

  accepttaa)
    isCurlInstalled
    isJQInstalled

    baseUrl=${1}
    secretName=${2:-"agent-${PROFILE}"}
    secretKey=${3:-admin-api-key}
    namespace=${4:-$(getProjectName)}
    accepttaa ${baseUrl} ${secretName} ${secretKey} ${namespace}
    ;;

  registersovrin)
    isCurlInstalled
    isJQInstalled

    baseUrl=${1}
    ledger=${2}
    secretName=${3:-"agent-${PROFILE}"}
    secretKey=${4:-"admin-api-key"}
    namespace=${5:-$(getProjectName)}
    registerSovrin ${baseUrl} ${ledger} ${secretName} ${secretKey} ${namespace}
    ;;

  getledgernymcmd)
    isCurlInstalled
    isJQInstalled

    baseUrl=${1}
    ledger=${2}
    secretName=${3:-"agent-${PROFILE}"}
    secretKey=${4:-"admin-api-key"}
    namespace=${5:-$(getProjectName)}
    didRole=${6:-${didRole}}
    registerSovrin -c ${baseUrl} ${ledger} ${secretName} ${secretKey} ${namespace} ${didRole}
    ;;

  addauthclient)
    clientName=${1}
    clientRedirectUri=${2}
    clientCorsOrigin=${3}
    podName=${4}
    addAuthClient ${clientName} ${clientRedirectUri} ${clientCorsOrigin} ${podName}
    ;;

  updateauthclient)
    clientName=${1}
    clientRedirectUri=${2}
    clientCorsOrigin=${3}
    podName=${4}
    updateAuthClient ${clientName} ${clientRedirectUri} ${clientCorsOrigin} ${podName}
    ;;

  getauthclient)
    clientName=${1}
    podName=${2}
    getAuthClient ${clientName} ${clientRedirectUri} ${clientCorsOrigin} ${podName}
    ;;

  syncreventrystate)
    isCurlInstalled
    isJQInstalled

    syncRevEntryState
    ;;

  scaleup)
    scaleUp -w $${@}
    ;;
  scaledown)
    scaleDown -w ${@}
    ;;
  recycle)
    recyclePods -w ${@}
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null